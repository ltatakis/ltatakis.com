---
title: "Kubernetes a childs guide"
layout: post
date: 2018-10-31 13:48
image: /assets/kubernetes/nick.png
headerImage: false
tag:
- kubernetes
- Docker
category: blog
author: Lefteris Tatakis
description: Kubernetes 101 - how I understand it
# jemoji: '<img class="emoji" title=":ramen:" alt=":ramen:" src="https://assets.github.com/images/icons/emoji/unicode/1f35c.png" height="20" width="20" align="absmiddle">'
---

As most of my "blogs" on this site, this post is a point of reference for me. A quick guide of the things I learned and has most probably forgot over time.
I plan on coming back to this and adding (or removing) information I dont agree with or I don't find useful anymore.

## Kubernetes

In my mind its just a management system of containers. Deploying them, managing them, failure recovery and scaling.
Primarily used for micro services.
The most common use case for kubernetes is with docker containers.

> “Kubernetes is a portable, extensible open-source platform for managing containerized workloads and services” - kubernetes.io

But to be honest, how I visualise Kubernetes, is with the metaphor of Nick the Captain.

![Markdown Image][1]
<figcaption class="caption">Nick the Captain of our containers.</figcaption>

Nick is Kubernetes (Kubernetes originates from the Greek word helmsman of ship) of our Nodes e.g. 
![Markdown Image][2]
<figcaption class="caption">Nick managing our Node</figcaption>

The Kubernetes cluster node we are using has a number of containers. One of which, is our app:
![Markdown Image][3]
<figcaption class="caption">Our app is a container on that Node</figcaption>

In reality though Nick manages multiple Nodes, in a true Kubernetes fashion:
![Markdown Image][4]
<figcaption class="caption">Nick managing multiple Nodes</figcaption>

How does this really look like in Kubernetes?
![Markdown Image][5]
<figcaption class="caption">Our Pod in the Cluster</figcaption>


## What is a container

Containers let you isolate an application so that its under the impression its running on its own private machine

The most popular container platform for this is [Docker](https://www.docker.com/).

## What do I need to get started

- A dockerised application.
- A yml file so k8s knows what it needs for your app.

Eg like:
{% highlight yaml %}
apiVersion: v1
kind: Pod
metadata:
  name: nginx
spec:
  containers:
  - name: nginx
    image: nginx:1.7.9
    ports:
    - containerPort: 80
{% endhighlight %}

## How can you manage the cluster

At the moment, my team and I use Tectonic. 
Tectonic helps us check deployments and manage the cluster to some basic extent.
However, its not perfect such as as losing the logs, unable to retrieve the event history for pods, not being very descriptive and a lot of black magic related to it.

Most of the time we feel we don't have control of our own clusters.
We are actively investigating other solutions, primarily moving to AWS EKS and using the default kubernetes dashboard.

## Kubectl

The `kubectl` commands I tend to you on a daily basis are:
```sh
kubectl get pods --namespace ltatakis
```

Checking which env I am currently working on
```sh
kubectl config get-contexts
```

Choosing my namespace to work in
```sh
kubectl config use-contexts THE-ENV-I-WANT-2-USE
```

Deleted a namespace
```sh
kubectl delete namespaces
```

But by *far* the most useful one I use is:
```sh
kubectl --namespace ltatakis exec -it my-amazing-app-pod -- /bin/sh
```

<!-- ## Namespaces
<iframe src="https://giphy.com/embed/tAeB6dptxnoli" width="480" height="446" frameBorder="0" class="giphy-embed" allowFullScreen></iframe><p><a href="https://giphy.com/gifs/construction-tAeB6dptxnoli"></a></p> -->

---

Thats all for now folks!
<p align="centre">
<iframe src="https://giphy.com/embed/lD76yTC5zxZPG" width="480" height="352" frameBorder="0" class="giphy-embed" allowFullScreen></iframe><p><a href="https://giphy.com/gifs/the-end-thats-all-folks-lD76yTC5zxZPG"></a></p>
</p>

If you notice any mistakes please contact me on <a href="https://twitter.com/LTatakis"> Twitter</a>.


[1]: /assets/kubernetes/nick.png
[2]: /assets/kubernetes/nickOnship.png
[3]: /assets/kubernetes/containersonship.png
[4]: /assets/kubernetes/nickwithmultipleships.png
[5]: /assets/kubernetes/actualviewofcontainer.png